var LogisticsChain = artifacts.require('LogisticsChain')

contract('SupplyChain', function(accounts) {
    var logisticsChain
    // Declare few constants and assign a few sample accounts generated by ganache-cli
    var ownerID = accounts[0]
    const consigner1 = accounts[1]
    const consigner2 = accounts[2]
    const consignee1 = accounts[3]
    const consignee2 = accounts[4]
    const transportCompany1 = accounts[5]
    const transportCompany2 = accounts[6]
    const tranferStaion1 = accounts[7]
    const tranferStaion2 = accounts[8]
    const tranferStaion3 = accounts[9]

    // declare some orders (4)
    const productName1 = "bread"
    const productName2 = "cake"
    const productName3 = "T-shirt"
    const productName4 = "trousers"
    const productCode1 = 101
    const productCode2 = 102
    const productCode3 = 103
    const productCode4 = 104
    const productPrice1 = 10
    const productPrice2 = 20
    const productPrice3 = 30
    const productPrice4 = 40
    const productQuantity1 = 2
    const productQuantity2 = 3
    const orderID1 = 1
    const orderID2 = 2
    const orderID3 = 3
    const orderID4 = 4
    var state = 0
    const orderCreatedDate1 = "2023-5-10"
    const orderCreatedDate2 = "2023-5-23"
    const orderCreatedDate3 = "2023-5-17"
    const orderCreatedDate4 = "2023-6-2"

    console.log("<----------------ACCOUNTS----------------> ")
    console.log("Contract Owner: ", ownerID)
    console.log("Consigners: ", consigner1, consigner2)
    console.log("Consignees: ", consignee1, consignee2)
    console.log("Transport Companys: ", transportCompany1, transportCompany2)
    console.log("Transfer Stations: ", tranferStaion1, tranferStaion2, tranferStaion3)


    console.log("<-------TESTING CONTRACT FUNCTIONS------->")
    // Deploy SupplyChain and Register Actors
    it("0. Deploy LogisticsChain and Register Actors", async () => {
        logisticsChain = await LogisticsChain.deployed();

        // Declare and Initialize a variable for event
        var eventEmitted = false

        var event = logisticsChain.ConsignerAdded()
        await event.watch((err, res) => {
            eventEmitted = true
            console.log(err,res);
        })

        var event = logisticsChain.ConsigneeAdded()
        await event.watch((err, res) => {
            eventEmitted = true
            //console.log(res);
        })

        var event = logisticsChain.TransferStationAdded()
        await event.watch((err, res) => {
            eventEmitted = true
            //console.log(res);
        })

        var event = logisticsChain.TranportCompanyAdded()
        await event.watch((err, res) => {
            eventEmitted = true
            //console.log(res);
        })

        await logisticsChain.addConsigner(consigner1, { from: ownerID })
        await logisticsChain.addConsigner(consigner2, { from: ownerID })
        await logisticsChain.addConsignee(consignee1, { from: ownerID })
        await logisticsChain.addConsignee(consignee2, { from: ownerID })

        await supplyChain.addFarmer(originFarmerID, { from: ownerID })
        await supplyChain.addDistributor(distributorID, { from: ownerID })
        await supplyChain.addRetailer(retailerID, { from: ownerID })
        await supplyChain.addConsumer(consumerID, { from: ownerID })
    })

    // Create some orders and search for detail
    it("1. Create Orders And Search For Details", async () => {
        var eventEmitted = false

        var event = logisticsChain.OrderCreated()
        await event.watch((err, res) => {
            eventEmitted = true
            console.log(err,res);
        })

        await logisticsChain.initOrdersForConsignee(consigner1, consignee1,productName1,productCode1,productPrice1,productQuantity1,state,orderID1,orderCreatedDate1,{from:consignee1})
        await logisticsChain.initOrdersForConsignee(consigner1, consignee2,productName2,productCode2,productPrice2,productQuantity2,state,orderID2,orderCreatedDate2,{from:consignee2})
        await logisticsChain.initOrdersForConsignee(consigner2, consignee1,productName3,productCode3,productPrice3,productQuantity1,state,orderID3,orderCreatedDate3,{from:consignee1})
        await logisticsChain.initOrdersForConsignee(consigner2, consignee2,productName4,productCode4,productPrice4,productQuantity2,state,orderID4,orderCreatedDate4,{from:consignee2})

        // Retrieve the just now saved item from blockchain by calling function
        const ordersOfConsignee1 = await logisticsChain.searchForOrdersOfConsignee.call(consignee1)
        const ordersOfConsignee2 = await logisticsChain.searchForOrdersOfConsignee.call(consignee2)
        const ordersOfConsigner1 = await logisticsChain.searchForOrdersOfConsigner.call(consigner1)
        const ordersOfConsigner2 = await logisticsChain.searchForOrdersOfConsigner.call(consigner2)
        
        const consigneeOrderDetail1 = await logisticsChain.searchForOrderDetails.call(orderID1, { from: consignee1 })
        const consigneeOrderDetail2 = await logisticsChain.searchForOrderDetails.call(orderID2, { from: consignee2 })
        const consigneeOrderDetail3 = await logisticsChain.searchForOrderDetails.call(orderID3, { from: consignee1 })
        const consigneeOrderDetail4 = await logisticsChain.searchForOrderDetails.call(orderID4, { from: consignee2 })
        const consignerOrderDetail1 = await logisticsChain.searchForOrderDetails.call(orderID1, { from: consigner1 })
        const consignerOrderDetail2 = await logisticsChain.searchForOrderDetails.call(orderID2, { from: consigner1 })
        const consignerOrderDetail3 = await logisticsChain.searchForOrderDetails.call(orderID3, { from: consigner2 })
        const consignerOrderDetail4 = await logisticsChain.searchForOrderDetails.call(orderID4, { from: consigner2 })

        assert.equal(ordersOfConsignee1, [orderID1, orderID3], 'Error: Invalid orderId')
        assert.equal(ordersOfConsignee2, [orderID2, orderID4], 'Error: Invalid orderId')
        assert.equal(ordersOfConsigner1, [orderID1, orderID2], 'Error: Invalid orderId')
        assert.equal(ordersOfConsigner2, [orderID3, orderID4], 'Error: Invalid orderId')
        assert.equal(consigneeOrderDetail1[0], )
    })
    
});